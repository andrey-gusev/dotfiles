#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 <file_path> <expiration_time_in_seconds>"
    echo "Example: $0 document.txt 3600"
    exit 1
}

# Function to check if a command is available
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo "Error: $1 is not installed. Please install it and try again."
        exit 1
    fi
}

# Check for required tools
check_command curl
check_command qrencode

# Validate input parameters
if [ $# -ne 2 ]; then
    usage
fi

file="$1"
time="$2"

# Check if file exists and is readable
if [ ! -f "$file" ] || [ ! -r "$file" ]; then
    echo "Error: File '$file' does not exist or is not readable."
    exit 1
fi

# Validate expiration time (must be a positive integer)
if ! [[ "$time" =~ ^[0-9]+$ ]] || [ "$time" -le 0 ]; then
    echo "Error: Expiration time must be a positive integer."
    exit 1
fi

# Calculate expiration timestamp
expires=$(($(date +%s) + time))
expires_ms=$((expires * 1000))

# Upload file and capture curl output and status
response=$(curl -s -w "%{http_code}" -F "file=@$file" -F "expires=$expires_ms" -F "secret=" https://0x0.st)
http_code=${response: -3}
link=${response::-3}

# Check curl response
if [ "$http_code" -ne 200 ]; then
    echo "Error: File upload failed with HTTP status $http_code."
    exit 1
fi

# Check if link is empty
if [ -z "$link" ]; then
    echo "Error: Failed to retrieve upload link."
    exit 1
fi

# Convert expiration time to human-readable format
human_time=$(printf '%dd %dh %dm %ds' $((time/86400)) $((time%86400/3600)) $((time%3600/60)) $((time%60)))

# Generate QR code and display link
echo "File uploaded successfully!"
qrencode -t ANSIUTF8 "$link"
echo "Download link: $link"
echo "File will be deleted after approximately $human_time"
echo "Expiration timestamp: $(date -d @$expires '+%Y-%m-%d %H:%M:%S')"

